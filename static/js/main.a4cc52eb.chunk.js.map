{"version":3,"sources":["components/EmployeeTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmployeeTable","props","console","log","employees","map","employee","src","picture","medium","alt","name","first","last","phone","email","App","useState","setEmployees","filteredemployees","setFilteredemployees","userInput","setuserInput","sortType","setSortType","useEffect","axios","get","then","response","data","results","filterList","filter","toLowerCase","includes","sort","a","b","className","type","onChange","e","target","value","placeholder","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAkDeA,EAhDO,SAACC,GAIhB,OAFHC,QAAQC,IAAIF,GAGR,qCACI,8DAMA,kCACI,+BACI,uCACA,sCACA,8CACA,0CAGAA,EAAMG,UAAUC,KACZ,SAAAC,GACI,OAAQ,+BAEJ,6BACI,qBAAKC,IAAKD,EAASE,QAAQC,OAAQC,IAAI,cAE3C,6BACKJ,EAASK,KAAKC,MAAQ,IAAMN,EAASK,KAAKE,OAE/C,6BACKP,EAASQ,QAEd,6BACKR,EAASS,qBCmE/BC,MA9Ff,WAAe,MAEqBC,mBAAS,IAF9B,mBAENb,EAFM,KAEKc,EAFL,OAIqCD,mBAAS,IAJ9C,mBAINE,EAJM,KAIaC,EAJb,OAKqBH,mBAAS,MAL9B,mBAKNI,EALM,KAKKC,EALL,OAOmBL,mBAAS,OAP5B,mBAONM,EAPM,KAOIC,EAPJ,KAoEb,OA5DAC,qBAAU,WACRC,IACGC,IAAI,gDACJC,MAAK,SAACC,GACLX,EAAa,YAAIW,EAASC,KAAKC,UAC/BX,EAAqB,YAAIS,EAASC,KAAKC,UACvC7B,QAAQC,IAAI0B,QAEf,IA4BHJ,qBAAU,WACZ,IAAMO,EAAa5B,EAAU6B,QAAO,SAAA3B,GAAQ,OAAIA,EAASK,KAAKE,KAAKqB,cAAcC,SAASd,IAAcf,EAASK,KAAKC,MAAMsB,cAAcC,SAASd,MAEnJ,OAAOD,EAAqBY,KAEvB,CAACX,IAQJI,qBAAU,WAKVL,EADW,SAAbG,EACuB,YAAIJ,GAAmBiB,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAE1B,KAAKE,KAAKqB,cAAgBI,EAAE3B,KAAKE,KAAKqB,cAAgB,GAAK,KAClG,YAAIf,GAAmBiB,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAE3B,KAAKE,KAAKqB,cAAgBG,EAAE1B,KAAKE,KAAKqB,cAAgB,GAAK,QAEtH,CAACX,IAIA,sBAAKgB,UAAU,MAAf,UAEE,8BACE,oDAIF,8BACE,+BACE,uBAAOC,KAAK,SAASC,SApCR,SAAAC,GAAC,OAAIpB,EAAaoB,EAAEC,OAAOC,QAoCKC,YAAY,0CAM7D,8BACE,wBAAQC,QAlBI,kBAA2BtB,EAAR,QAAbD,EAAiC,OAAsB,QAkBzE,2CAGF,cAAC,EAAD,CAAenB,UAAWe,QCrFjB4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a4cc52eb.chunk.js","sourcesContent":["import React from 'react'\r\n//setting up new component for table, filter and search\r\nconst EmployeeTable = (props) => {\r\n    //check to see data is pulling from API\r\n    console.log(props);\r\n    \r\n       return (\r\n        <>\r\n            <h1>Corporate Employee Directory</h1>\r\n\r\n            {/* creates a search box for filtering and a button to sort the directory by last name. */}\r\n            \r\n\r\n            {/* Table with headings and map functionality to render specific parts of data from the object  */}\r\n            <table>\r\n                <tr>\r\n                    <th>Image</th>\r\n                    <th>Name</th>\r\n                    <th>Phone Number</th>\r\n                    <th>Email</th>\r\n                </tr>\r\n                {\r\n                    props.employees.map(\r\n                        employee => {\r\n                            return (<tr>\r\n\r\n                                <td>\r\n                                    <img src={employee.picture.medium} alt=\"picture\"/>\r\n                                </td>\r\n                                <td>\r\n                                    {employee.name.first + \" \" + employee.name.last}\r\n                                </td>\r\n                                <td>\r\n                                    {employee.phone}\r\n                                </td>\r\n                                <td>\r\n                                    {employee.email}\r\n                                </td>\r\n\r\n                            </tr>)\r\n                        }\r\n                    )\r\n                }\r\n            </table>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmployeeTable\r\n","import './App.css';\n//importing in Axios package\nimport axios from 'axios';\n//importing in React with useEffect and UseState to use Hooks\nimport React, { useEffect, useState } from 'react';\n//importing in the EmployeeTable component to render the data pulled from the API\nimport EmployeeTable from \"./components/EmployeeTable\"\n\n// sets the state and uses axios to pull data from the randomuser API. The data will be used to render it in via the EmployeeTable component \nfunction App() {\n  //default state that uses the original array from the API pull\n  const [employees, setEmployees] = useState([]);\n  //state for the filtered results to rerender the page but not overwrite the original array\n  const [filteredemployees, setFilteredemployees] = useState([]);\n  const [userInput, setuserInput] = useState(null);\n\n  const [sortType, setSortType] = useState(\"asc\");\n  useEffect(() => {\n    axios\n      .get(\"https://randomuser.me/api/?results=15&nat=us\")\n      .then((response) => {\n        setEmployees([...response.data.results]);\n        setFilteredemployees([...response.data.results]);\n        console.log(response);\n      });\n  }, []);\n\n  //this function will filter the employees array based on the content of the input box \n  // function handleChange(e) {\n  //   // checking if props.employees contains data. This works\n  //   console.log(employees)\n  //   //this sets a variable to text currently in search box\n  //   const userInput = e.target.value;\n  //   // testing to see if data is being captured in search box. This works\n  //   console.log(userInput)\n  //   //filters the employee array to match entry in search box\n  //   const filteredList = employees.filter(item => {\n  //     console.log(item.name.last.toLowerCase());\n  //     console.log(userInput.toLowerCase())\n  //     if (item.name.last.toLowerCase() === userInput.toLowerCase()) {\n  //       return true\n  //     }\n  //     return false\n  //   })\n  //   //checks to see if array has been filtered. This does not work.\n  //   console.log(filteredList)\n  //   // updates state use the filteredList array\n  //   setFilteredemployees(filteredList)\n\n  // }\n\n  const handleChange = e => setuserInput(e.target.value)\n\n  useEffect(() => {\nconst filterList = employees.filter(employee => employee.name.last.toLowerCase().includes(userInput) || employee.name.first.toLowerCase().includes(userInput))\n\nreturn setFilteredemployees(filterList)\n\n  }, [userInput]\n  \n  \n  \n  \n  \n  )\n\n  useEffect(() => {\n    // sortType === \"desc\" ?\n    //   filteredemployees([...filteredemployees].sort((a, b) => a.name.last.toLowerCase() > b.name.last.toLowerCase() ? 1 : -1) \n    //   : filteredemployees([...filteredemployees].sort((a, b) => b.name.last.toLowerCase() > a.name.last.toLowerCase() ? 1 : -1)\nsortType === \"desc\" \n? setFilteredemployees([...filteredemployees].sort((a,b) => a.name.last.toLowerCase() > b.name.last.toLowerCase() ? 1 : -1))\n: setFilteredemployees([...filteredemployees].sort((a,b) => b.name.last.toLowerCase() > a.name.last.toLowerCase() ? 1 : -1))\n\n}, [sortType])\n\nconst sortToggler = () => sortType === \"asc\" ? setSortType(\"desc\") : setSortType(\"asc\")  \n  return (\n    <div className=\"App\">\n\n      <div>\n        <h2>Search Employees</h2>\n\n      </div>\n      {/* Includes on OnChange event that will pass the value in the search box to the filter function above.  */}\n      <div>\n        <form>\n          <input type=\"search\" onChange={handleChange} placeholder=\"Enter employee first or last name\" />\n\n        </form>\n      </div>\n\n\n      <div>\n        <button onClick={sortToggler}>Sort Employees by Last Name</button>\n      </div>\n      {/* This is the EmployeeTable component with the employees state that was set above in the Axios call */}\n      <EmployeeTable employees={filteredemployees} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}